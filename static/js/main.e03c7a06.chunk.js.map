{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["GlobalStyles","createGlobalStyle","Container","styled","main","Loading","h1","Card","div","ImgContainer","Img","img","InfoContainer","section","Message","h3","PersonData","ToggleBtnContainer","UserBtn","FaUser","MailBtn","FaEnvelopeOpen","AgeBtn","FaCalendarTimes","MapBtn","FaMap","CellBtn","FaPhone","PasswordBtn","FaLock","BtnContainer","ChangeBtn","button","App","useState","data","setData","value","setValue","loading","setLoading","fetchData","a","fetch","res","json","personData","results","cell","email","location","login","name","dob","picture","street","age","large","streetNumber","number","streetName","address","first","last","password","Name","console","log","useEffect","hoverHandler","e","target","dataset","label","src","data-label","onMouseOver","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e03c7a06.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport {\n    FaEnvelopeOpen,\n    FaUser,\n    FaCalendarTimes,\n    FaMap,\n    FaPhone,\n    FaLock,\n} from \"react-icons/fa\";\n\nconst GlobalStyles = createGlobalStyle`\n  *{\n    margin: 0;\n    padding:0;\n    box-sizing: border-box;\n  }\n  body{\n    font-family: 'Roboto', sans-serif;\n  }\n  \n`;\n\nconst url = `https://randomuser.me/api/`;\n\nconst App = () => {\n    const [data, setData] = useState({});\n    const [value, setValue] = useState(`Name`);\n    const [loading, setLoading] = useState(true);\n    const fetchData = async () => {\n        try {\n            setLoading(true);\n            const res = await fetch(url);\n            const personData = await res.json();\n            const {\n                cell,\n                email,\n                location,\n                login,\n                name,\n                dob,\n                picture,\n            } = personData.results[0];\n            const { street } = location;\n            const { age } = dob;\n            const { large: img } = picture;\n            const { number: streetNumber, name: streetName } = street;\n            const address = `${streetNumber} ${streetName}`;\n            const { first, last } = name;\n            const { password } = login;\n            const Name = `${first} ${last}`;\n            setData({\n                cell,\n                email,\n                age,\n                address,\n                password,\n                Name,\n                img,\n            });\n            setLoading(false);\n        } catch (error) {\n            setLoading(false);\n            console.log(error);\n        }\n    };\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    const hoverHandler = (e) => {\n        if (e.target.dataset.label) {\n            setValue(`${e.target.dataset.label}`);\n        }\n    };\n\n    return (\n        <>\n            <GlobalStyles />\n            <Container>\n                {loading ? (\n                    <Loading> Loading .... </Loading>\n                ) : (\n                    <Card>\n                        <ImgContainer>\n                            <Img src={data.img}></Img>\n                        </ImgContainer>\n                        <InfoContainer>\n                            <Message>{`my ${value} is`}</Message>\n                            <PersonData>{data[value]}</PersonData>\n                            <ToggleBtnContainer>\n                                <UserBtn\n                                    data-label=\"Name\"\n                                    onMouseOver={hoverHandler}\n                                />\n\n                                <MailBtn\n                                    data-label=\"email\"\n                                    onMouseOver={hoverHandler}\n                                />\n                                <AgeBtn\n                                    data-label=\"age\"\n                                    onMouseOver={hoverHandler}\n                                />\n                                <MapBtn\n                                    data-label=\"address\"\n                                    onMouseOver={hoverHandler}\n                                />\n                                <CellBtn\n                                    data-label=\"cell\"\n                                    onMouseOver={hoverHandler}\n                                />\n                                <PasswordBtn\n                                    data-label=\"password\"\n                                    onMouseOver={hoverHandler}\n                                />\n                            </ToggleBtnContainer>\n                        </InfoContainer>\n                        <BtnContainer>\n                            <ChangeBtn onClick={fetchData}>\n                                Random User\n                            </ChangeBtn>\n                        </BtnContainer>\n                    </Card>\n                )}\n            </Container>\n        </>\n    );\n};\n\nconst Container = styled.main`\n    height: 100vh;\n    background: linear-gradient(#2c2e31 50%, white 50%);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst Loading = styled.h1`\n    color: #49a6e6;\n    margin-bottom: 2rem;\n`;\n\nconst Card = styled.div`\n    background-color: white;\n    box-shadow: 0 5px 15px black;\n    max-width: 95%;\n`;\n\nconst ImgContainer = styled.div`\n    width: auto;\n    display: flex;\n    justify-content: center;\n`;\n\nconst Img = styled.img`\n    width: 50%;\n    border-radius: 50%;\n    box-shadow: 5px 5px 10px gray;\n    margin: 1.4rem;\n`;\n\nconst InfoContainer = styled.section`\n    text-align: center;\n    color: #102a42;\n`;\n\nconst Message = styled.h3`\n    font-weight: 400;\n    margin: 0.8rem 0;\n    text-transform: capitalize;\n`;\n\nconst PersonData = styled.h1`\n    font-size: 1.2rem;\n    margin: 1.4rem 0;\n    @media (min-width: 300px) {\n        font-size: 1.5rem;\n    }\n`;\n\nconst ToggleBtnContainer = styled.div`\n    font-size: 2rem;\n    svg {\n        cursor: pointer;\n        margin: 1rem 1rem;\n        &:hover {\n            color: #617d98;\n        }\n    }\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n`;\n\nconst UserBtn = styled(FaUser)``;\n\nconst MailBtn = styled(FaEnvelopeOpen)``;\n\nconst AgeBtn = styled(FaCalendarTimes)``;\n\nconst MapBtn = styled(FaMap)``;\n\nconst CellBtn = styled(FaPhone)``;\n\nconst PasswordBtn = styled(FaLock)``;\n\nconst BtnContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    margin: 1rem;\n`;\n\nconst ChangeBtn = styled.button`\n    font-size: 1.2rem;\n    background-color: #49a6e6;\n    border: none;\n    font-weight: 600;\n    color: white;\n    padding: 5px 10px;\n    border-radius: 4px;\n    outline: none;\n    cursor: pointer;\n    &:hover {\n        background-color: #063251;\n    }\n`;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}